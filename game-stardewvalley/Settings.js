"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_bootstrap_1 = require("react-bootstrap");
const react_i18next_1 = require("react-i18next");
const react_redux_1 = require("react-redux");
const vortex_api_1 = require("vortex-api");
const actions_1 = require("./actions");
const common_1 = require("./common");
function Settings(props) {
    const { onMergeConfigToggle } = props;
    const sdvSettings = (0, react_redux_1.useSelector)((state) => state.settings['SDV']);
    const { useRecommendations, mergeConfigs } = sdvSettings;
    const store = (0, react_redux_1.useStore)();
    const { profileId } = (0, react_redux_1.useSelector)(mapStateToProps);
    const setUseRecommendations = react_1.default.useCallback((enabled) => {
        store.dispatch((0, actions_1.setRecommendations)(enabled));
    }, []);
    const setMergeConfigSetting = react_1.default.useCallback((enabled) => {
        onMergeConfigToggle(profileId, enabled);
    }, [onMergeConfigToggle, profileId]);
    const { t } = (0, react_i18next_1.useTranslation)();
    const mergeEnabled = mergeConfigs === null || mergeConfigs === void 0 ? void 0 : mergeConfigs[profileId];
    return (react_1.default.createElement("form", null,
        react_1.default.createElement(react_bootstrap_1.FormGroup, { controlId: 'default-enable' },
            react_1.default.createElement(react_bootstrap_1.Panel, null,
                react_1.default.createElement(react_bootstrap_1.Panel.Body, null,
                    react_1.default.createElement(react_bootstrap_1.ControlLabel, null, t('Stardew Valley')),
                    react_1.default.createElement(vortex_api_1.Toggle, { checked: useRecommendations, onToggle: setUseRecommendations, disabled: true },
                        t('Use recommendations from the mod manifests'),
                        react_1.default.createElement(vortex_api_1.More, { id: 'sdv_use_recommendations', name: 'SDV Use Recommendations' }, t('If checked, when you install a mod for Stardew Valley you may get '
                            + 'suggestions for installing further mods, required or recommended by it.'
                            + 'This information could be wrong or incomplete so please carefully '
                            + 'consider before accepting them.'))),
                    react_1.default.createElement(vortex_api_1.Toggle, { checked: mergeEnabled, onToggle: setMergeConfigSetting },
                        t('Manage SDV mod configuration files'),
                        react_1.default.createElement(vortex_api_1.More, { id: 'sdv_mod_configuration', name: 'SDV Mod Configuration' }, t('Vortex by default is configured to attempt to pull-in newly created files (mod configuration json files for example) '
                            + 'created externally (by the game itself or tools) into their respective mod folders.\n\n'
                            + 'Unfortunately the configuration files are lost during mod updates when using this method.\n\n'
                            + 'Toggling this functionality creates a separate mod configuration "override" folder where all of your mod configuration files '
                            + 'will be stored. This allows you to manage your mod configuration files on their own, regardless of mod updates. '))))))));
}
function mapStateToProps(state) {
    const profileId = vortex_api_1.selectors.lastActiveProfileForGame(state, common_1.GAME_ID);
    return {
        profileId,
    };
}
exports.default = Settings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXR0aW5ncy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIscURBQTRFO0FBQzVFLGlEQUErQztBQUMvQyw2Q0FBb0Q7QUFDcEQsMkNBQTREO0FBQzVELHVDQUErQztBQUMvQyxxQ0FBbUM7QUFVbkMsU0FBUyxRQUFRLENBQUMsS0FBaUI7SUFDakMsTUFBTSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3RDLE1BQU0sV0FBVyxHQUFHLElBQUEseUJBQVcsRUFBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsR0FBRyxXQUFXLENBQUM7SUFDekQsTUFBTSxLQUFLLEdBQUcsSUFBQSxzQkFBUSxHQUFFLENBQUM7SUFDekIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEseUJBQVcsRUFBQyxlQUFlLENBQUMsQ0FBQztJQUVuRCxNQUFNLHFCQUFxQixHQUFHLGVBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFnQixFQUFFLEVBQUU7UUFDbkUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFBLDRCQUFrQixFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsTUFBTSxxQkFBcUIsR0FBRyxlQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO1FBQ25FLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXJDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFBLDhCQUFjLEdBQUUsQ0FBQztJQUMvQixNQUFNLFlBQVksR0FBRyxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUcsU0FBUyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUNMO1FBQ0UsOEJBQUMsMkJBQVMsSUFBQyxTQUFTLEVBQUMsZ0JBQWdCO1lBQ25DLDhCQUFDLHVCQUFLO2dCQUNKLDhCQUFDLHVCQUFLLENBQUMsSUFBSTtvQkFDVCw4QkFBQyw4QkFBWSxRQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFnQjtvQkFDbEQsOEJBQUMsbUJBQU0sSUFDTCxPQUFPLEVBQUUsa0JBQWtCLEVBQzNCLFFBQVEsRUFBRSxxQkFBcUIsRUFDL0IsUUFBUSxFQUFFLElBQUk7d0JBRWIsQ0FBQyxDQUFDLDRDQUE0QyxDQUFDO3dCQUNoRCw4QkFBQyxpQkFBSSxJQUFDLEVBQUUsRUFBQyx5QkFBeUIsRUFBQyxJQUFJLEVBQUMseUJBQXlCLElBQzlELENBQUMsQ0FBQyxvRUFBb0U7OEJBQ25FLHlFQUF5RTs4QkFDekUsb0VBQW9FOzhCQUNwRSxpQ0FBaUMsQ0FBQyxDQUNqQyxDQUNBO29CQUNULDhCQUFDLG1CQUFNLElBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUscUJBQXFCO3dCQUMzRCxDQUFDLENBQUMsb0NBQW9DLENBQUM7d0JBQ3hDLDhCQUFDLGlCQUFJLElBQUMsRUFBRSxFQUFDLHVCQUF1QixFQUFDLElBQUksRUFBQyx1QkFBdUIsSUFDMUQsQ0FBQyxDQUFDLHVIQUF1SDs4QkFDdEgseUZBQXlGOzhCQUN6RiwrRkFBK0Y7OEJBQy9GLCtIQUErSDs4QkFDL0gsa0hBQWtILENBQ3JILENBQ0ksQ0FDQSxDQUNFLENBQ1AsQ0FDRSxDQUNQLENBQ1IsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxLQUFtQjtJQUMxQyxNQUFNLFNBQVMsR0FBRyxzQkFBUyxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxnQkFBTyxDQUFDLENBQUM7SUFDckUsT0FBTztRQUNMLFNBQVM7S0FDVixDQUFBO0FBQ0gsQ0FBQztBQUVELGtCQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvbnRyb2xMYWJlbCwgRm9ybUdyb3VwLCBIZWxwQmxvY2ssIFBhbmVsIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcclxuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0JztcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBUb2dnbGUsIE1vcmUsIHNlbGVjdG9ycywgdHlwZXMgfSBmcm9tICd2b3J0ZXgtYXBpJztcclxuaW1wb3J0IHsgc2V0UmVjb21tZW5kYXRpb25zIH0gZnJvbSAnLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgR0FNRV9JRCB9IGZyb20gJy4vY29tbW9uJztcclxuXHJcbmludGVyZmFjZSBJQmFzZVByb3BzIHtcclxuICBvbk1lcmdlQ29uZmlnVG9nZ2xlOiAocHJvZmlsZUlkOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD47XHJcbn1cclxuXHJcbmludGVyZmFjZSBJQ29ubmVjdGVkUHJvcHMge1xyXG4gIHByb2ZpbGVJZDogc3RyaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTZXR0aW5ncyhwcm9wczogSUJhc2VQcm9wcykge1xyXG4gIGNvbnN0IHsgb25NZXJnZUNvbmZpZ1RvZ2dsZSB9ID0gcHJvcHM7XHJcbiAgY29uc3Qgc2R2U2V0dGluZ3MgPSB1c2VTZWxlY3Rvcigoc3RhdGU6IGFueSkgPT4gc3RhdGUuc2V0dGluZ3NbJ1NEViddKTtcclxuICBjb25zdCB7IHVzZVJlY29tbWVuZGF0aW9ucywgbWVyZ2VDb25maWdzIH0gPSBzZHZTZXR0aW5ncztcclxuICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKCk7XHJcbiAgY29uc3QgeyBwcm9maWxlSWQgfSA9IHVzZVNlbGVjdG9yKG1hcFN0YXRlVG9Qcm9wcyk7XHJcblxyXG4gIGNvbnN0IHNldFVzZVJlY29tbWVuZGF0aW9ucyA9IFJlYWN0LnVzZUNhbGxiYWNrKChlbmFibGVkOiBib29sZWFuKSA9PiB7XHJcbiAgICBzdG9yZS5kaXNwYXRjaChzZXRSZWNvbW1lbmRhdGlvbnMoZW5hYmxlZCkpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3Qgc2V0TWVyZ2VDb25maWdTZXR0aW5nID0gUmVhY3QudXNlQ2FsbGJhY2soKGVuYWJsZWQ6IGJvb2xlYW4pID0+IHtcclxuICAgIG9uTWVyZ2VDb25maWdUb2dnbGUocHJvZmlsZUlkLCBlbmFibGVkKTtcclxuICB9LCBbb25NZXJnZUNvbmZpZ1RvZ2dsZSwgcHJvZmlsZUlkXSk7XHJcblxyXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICBjb25zdCBtZXJnZUVuYWJsZWQgPSBtZXJnZUNvbmZpZ3M/Lltwcm9maWxlSWRdO1xyXG4gIHJldHVybiAoXHJcbiAgICA8Zm9ybT5cclxuICAgICAgPEZvcm1Hcm91cCBjb250cm9sSWQ9J2RlZmF1bHQtZW5hYmxlJz5cclxuICAgICAgICA8UGFuZWw+XHJcbiAgICAgICAgICA8UGFuZWwuQm9keT5cclxuICAgICAgICAgICAgPENvbnRyb2xMYWJlbD57dCgnU3RhcmRldyBWYWxsZXknKX08L0NvbnRyb2xMYWJlbD5cclxuICAgICAgICAgICAgPFRvZ2dsZVxyXG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3VzZVJlY29tbWVuZGF0aW9uc31cclxuICAgICAgICAgICAgICBvblRvZ2dsZT17c2V0VXNlUmVjb21tZW5kYXRpb25zfVxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXt0cnVlfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAge3QoJ1VzZSByZWNvbW1lbmRhdGlvbnMgZnJvbSB0aGUgbW9kIG1hbmlmZXN0cycpfVxyXG4gICAgICAgICAgICAgIDxNb3JlIGlkPSdzZHZfdXNlX3JlY29tbWVuZGF0aW9ucycgbmFtZT0nU0RWIFVzZSBSZWNvbW1lbmRhdGlvbnMnPlxyXG4gICAgICAgICAgICAgICAge3QoJ0lmIGNoZWNrZWQsIHdoZW4geW91IGluc3RhbGwgYSBtb2QgZm9yIFN0YXJkZXcgVmFsbGV5IHlvdSBtYXkgZ2V0ICdcclxuICAgICAgICAgICAgICAgICAgKyAnc3VnZ2VzdGlvbnMgZm9yIGluc3RhbGxpbmcgZnVydGhlciBtb2RzLCByZXF1aXJlZCBvciByZWNvbW1lbmRlZCBieSBpdC4nXHJcbiAgICAgICAgICAgICAgICAgICsgJ1RoaXMgaW5mb3JtYXRpb24gY291bGQgYmUgd3Jvbmcgb3IgaW5jb21wbGV0ZSBzbyBwbGVhc2UgY2FyZWZ1bGx5ICdcclxuICAgICAgICAgICAgICAgICAgKyAnY29uc2lkZXIgYmVmb3JlIGFjY2VwdGluZyB0aGVtLicpfVxyXG4gICAgICAgICAgICAgIDwvTW9yZT5cclxuICAgICAgICAgICAgPC9Ub2dnbGU+XHJcbiAgICAgICAgICAgIDxUb2dnbGUgY2hlY2tlZD17bWVyZ2VFbmFibGVkfSBvblRvZ2dsZT17c2V0TWVyZ2VDb25maWdTZXR0aW5nfT5cclxuICAgICAgICAgICAgICB7dCgnTWFuYWdlIFNEViBtb2QgY29uZmlndXJhdGlvbiBmaWxlcycpfVxyXG4gICAgICAgICAgICAgIDxNb3JlIGlkPSdzZHZfbW9kX2NvbmZpZ3VyYXRpb24nIG5hbWU9J1NEViBNb2QgQ29uZmlndXJhdGlvbic+XHJcbiAgICAgICAgICAgICAgICB7dCgnVm9ydGV4IGJ5IGRlZmF1bHQgaXMgY29uZmlndXJlZCB0byBhdHRlbXB0IHRvIHB1bGwtaW4gbmV3bHkgY3JlYXRlZCBmaWxlcyAobW9kIGNvbmZpZ3VyYXRpb24ganNvbiBmaWxlcyBmb3IgZXhhbXBsZSkgJ1xyXG4gICAgICAgICAgICAgICAgICArICdjcmVhdGVkIGV4dGVybmFsbHkgKGJ5IHRoZSBnYW1lIGl0c2VsZiBvciB0b29scykgaW50byB0aGVpciByZXNwZWN0aXZlIG1vZCBmb2xkZXJzLlxcblxcbidcclxuICAgICAgICAgICAgICAgICAgKyAnVW5mb3J0dW5hdGVseSB0aGUgY29uZmlndXJhdGlvbiBmaWxlcyBhcmUgbG9zdCBkdXJpbmcgbW9kIHVwZGF0ZXMgd2hlbiB1c2luZyB0aGlzIG1ldGhvZC5cXG5cXG4nXHJcbiAgICAgICAgICAgICAgICAgICsgJ1RvZ2dsaW5nIHRoaXMgZnVuY3Rpb25hbGl0eSBjcmVhdGVzIGEgc2VwYXJhdGUgbW9kIGNvbmZpZ3VyYXRpb24gXCJvdmVycmlkZVwiIGZvbGRlciB3aGVyZSBhbGwgb2YgeW91ciBtb2QgY29uZmlndXJhdGlvbiBmaWxlcyAnXHJcbiAgICAgICAgICAgICAgICAgICsgJ3dpbGwgYmUgc3RvcmVkLiBUaGlzIGFsbG93cyB5b3UgdG8gbWFuYWdlIHlvdXIgbW9kIGNvbmZpZ3VyYXRpb24gZmlsZXMgb24gdGhlaXIgb3duLCByZWdhcmRsZXNzIG9mIG1vZCB1cGRhdGVzLiAnXHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgIDwvTW9yZT5cclxuICAgICAgICAgICAgPC9Ub2dnbGU+XHJcbiAgICAgICAgICA8L1BhbmVsLkJvZHk+XHJcbiAgICAgICAgPC9QYW5lbD5cclxuICAgICAgPC9Gb3JtR3JvdXA+XHJcbiAgICA8L2Zvcm0+XHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlOiB0eXBlcy5JU3RhdGUpOiBJQ29ubmVjdGVkUHJvcHMge1xyXG4gIGNvbnN0IHByb2ZpbGVJZCA9IHNlbGVjdG9ycy5sYXN0QWN0aXZlUHJvZmlsZUZvckdhbWUoc3RhdGUsIEdBTUVfSUQpO1xyXG4gIHJldHVybiB7XHJcbiAgICBwcm9maWxlSWQsXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZXR0aW5ncztcclxuIl19