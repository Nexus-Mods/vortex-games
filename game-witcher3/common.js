"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACTIVITY_ID_IMPORTING_LOADORDER = exports.NON_SORTABLE = exports.SCRIPT_MERGER_FILES = exports.DO_NOT_DEPLOY = exports.DO_NOT_DISPLAY = exports.LOCKED_PREFIX = exports.UNI_PATCH = exports.W3_TEMP_DATA_DIR = exports.CONFIG_MATRIX_REL_PATH = exports.I18N_NAMESPACE = exports.LOAD_ORDER_FILENAME = exports.MERGE_INV_MANIFEST = exports.SCRIPT_MERGER_ID = exports.PART_SUFFIX = exports.INPUT_XML_FILENAME = exports.GAME_ID = exports.getSuppressModLimitBranch = exports.getPriorityTypeBranch = exports.getLoadOrderFilePath = exports.getHash = exports.calcHashImpl = exports.MergeDataViolationError = exports.ResourceInaccessibleError = exports.MD5ComparisonError = void 0;
const crypto_1 = __importDefault(require("crypto"));
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
class MD5ComparisonError extends Error {
    constructor(message, file) {
        super(message);
        this.mPath = file;
    }
    get affectedFile() {
        return this.mPath;
    }
    get errorMessage() {
        return this.message + ': ' + this.mPath;
    }
}
exports.MD5ComparisonError = MD5ComparisonError;
class ResourceInaccessibleError extends Error {
    constructor(filePath, allowReport = false) {
        super(`"${filePath}" is being manipulated by another process`);
        this.mFilePath = filePath;
        this.mIsReportingAllowed = allowReport;
    }
    get isOneDrive() {
        const segments = this.mFilePath.split(path_1.default.sep)
            .filter(seg => !!seg)
            .map(seg => seg.toLowerCase());
        return segments.includes('onedrive');
    }
    get allowReport() {
        return this.mIsReportingAllowed;
    }
    get errorMessage() {
        return (this.isOneDrive)
            ? this.message + ': ' + 'probably by the OneDrive service.'
            : this.message + ': ' + 'close all applications that may be using this file.';
    }
}
exports.ResourceInaccessibleError = ResourceInaccessibleError;
class MergeDataViolationError extends Error {
    constructor(notIncluded, optional, collectionName) {
        super(`Merged script data for ${collectionName} is referencing missing/undeployed/optional mods`);
        this.name = 'MergeDataViolationError';
        this.mOptional = optional;
        this.mNotIncluded = notIncluded;
        this.mCollectionName = collectionName;
    }
    get Optional() {
        return this.mOptional;
    }
    get NotIncluded() {
        return this.mNotIncluded;
    }
    get CollectionName() {
        return this.mCollectionName;
    }
}
exports.MergeDataViolationError = MergeDataViolationError;
function calcHashImpl(filePath) {
    return new Promise((resolve, reject) => {
        const hash = crypto_1.default.createHash('md5');
        const stream = vortex_api_1.fs.createReadStream(filePath);
        stream.on('readable', () => {
            const data = stream.read();
            if (data) {
                hash.update(data);
            }
        });
        stream.on('end', () => resolve(hash.digest('hex')));
        stream.on('error', reject);
    });
}
exports.calcHashImpl = calcHashImpl;
function getHash(filePath, tries = 3) {
    return calcHashImpl(filePath)
        .catch(err => {
        if (['EMFILE', 'EBADF'].includes(err['code']) && (tries > 0)) {
            return getHash(filePath, tries - 1);
        }
        else {
            return Promise.reject(err);
        }
    });
}
exports.getHash = getHash;
function getLoadOrderFilePath() {
    return path_1.default.join(vortex_api_1.util.getVortexPath('documents'), 'The Witcher 3', exports.LOAD_ORDER_FILENAME);
}
exports.getLoadOrderFilePath = getLoadOrderFilePath;
function getPriorityTypeBranch() {
    return ['settings', 'witcher3', 'prioritytype'];
}
exports.getPriorityTypeBranch = getPriorityTypeBranch;
function getSuppressModLimitBranch() {
    return ['settings', 'witcher3', 'suppressModLimitPatch'];
}
exports.getSuppressModLimitBranch = getSuppressModLimitBranch;
exports.GAME_ID = 'witcher3';
exports.INPUT_XML_FILENAME = 'input.xml';
exports.PART_SUFFIX = '.part.txt';
exports.SCRIPT_MERGER_ID = 'W3ScriptMerger';
exports.MERGE_INV_MANIFEST = 'MergeInventory.xml';
exports.LOAD_ORDER_FILENAME = 'mods.settings';
exports.I18N_NAMESPACE = 'game-witcher3';
exports.CONFIG_MATRIX_REL_PATH = path_1.default.join('bin', 'config', 'r4game', 'user_config_matrix', 'pc');
exports.W3_TEMP_DATA_DIR = path_1.default.join(vortex_api_1.util.getVortexPath('temp'), 'W3TempData');
exports.UNI_PATCH = 'mod0000____CompilationTrigger';
exports.LOCKED_PREFIX = 'mod0000_';
exports.DO_NOT_DISPLAY = ['communitypatch-base'];
exports.DO_NOT_DEPLOY = ['README.TXT'];
exports.SCRIPT_MERGER_FILES = ['WitcherScriptMerger.exe'];
exports.NON_SORTABLE = ['witcher3menumoddocuments', 'collection'];
exports.ACTIVITY_ID_IMPORTING_LOADORDER = 'activity-witcher3-importing-loadorder';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9EQUE0QjtBQUM1QixnREFBd0I7QUFDeEIsMkNBQXNDO0FBQ3RDLE1BQWEsa0JBQW1CLFNBQVEsS0FBSztJQUUzQyxZQUFZLE9BQU8sRUFBRSxJQUFJO1FBQ3ZCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUMxQyxDQUFDO0NBQ0Y7QUFkRCxnREFjQztBQUVELE1BQWEseUJBQTBCLFNBQVEsS0FBSztJQUdsRCxZQUFZLFFBQVEsRUFBRSxXQUFXLEdBQUcsS0FBSztRQUN2QyxLQUFLLENBQUMsSUFBSSxRQUFRLDJDQUEyQyxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFdBQVcsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQzthQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQ3BCLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBSSxXQUFXO1FB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J2NyeXB0byc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBmcywgdXRpbCB9IGZyb20gJ3ZvcnRleC1hcGknO1xyXG5leHBvcnQgY2xhc3MgTUQ1Q29tcGFyaXNvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIHByaXZhdGUgbVBhdGg7XHJcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZmlsZSkge1xyXG4gICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICB0aGlzLm1QYXRoID0gZmlsZTtcclxuICB9XHJcblxyXG4gIGdldCBhZmZlY3RlZEZpbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tUGF0aDtcclxuICB9XHJcblxyXG4gIGdldCBlcnJvck1lc3NhZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlICsgJzogJyArIHRoaXMubVBhdGg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VJbmFjY2Vzc2libGVFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICBwcml2YXRlIG1Jc1JlcG9ydGluZ0FsbG93ZWQ7XHJcbiAgcHJpdmF0ZSBtRmlsZVBhdGg7XHJcbiAgY29uc3RydWN0b3IoZmlsZVBhdGgsIGFsbG93UmVwb3J0ID0gZmFsc2UpIHtcclxuICAgIHN1cGVyKGBcIiR7ZmlsZVBhdGh9XCIgaXMgYmVpbmcgbWFuaXB1bGF0ZWQgYnkgYW5vdGhlciBwcm9jZXNzYCk7XHJcbiAgICB0aGlzLm1GaWxlUGF0aCA9IGZpbGVQYXRoO1xyXG4gICAgdGhpcy5tSXNSZXBvcnRpbmdBbGxvd2VkID0gYWxsb3dSZXBvcnQ7XHJcbiAgfVxyXG5cclxuICBnZXQgaXNPbmVEcml2ZSgpIHtcclxuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5tRmlsZVBhdGguc3BsaXQocGF0aC5zZXApXHJcbiAgICAgIC5maWx0ZXIoc2VnID0+ICEhc2VnKVxyXG4gICAgICAubWFwKHNlZyA9PiBzZWcudG9Mb3dlckNhc2UoKSk7XHJcbiAgICByZXR1cm4gc2VnbWVudHMuaW5jbHVkZXMoJ29uZWRyaXZlJyk7XHJcbiAgfVxyXG5cclxuICBnZXQgYWxsb3dSZXBvcnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tSXNSZXBvcnRpbmdBbGxvd2VkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGVycm9yTWVzc2FnZSgpIHtcclxuICAgIHJldHVybiAodGhpcy5pc09uZURyaXZlKVxyXG4gICAgICA/IHRoaXMubWVzc2FnZSArICc6ICcgKyAncHJvYmFibHkgYnkgdGhlIE9uZURyaXZlIHNlcnZpY2UuJ1xyXG4gICAgICA6IHRoaXMubWVzc2FnZSArICc6ICcgKyAnY2xvc2UgYWxsIGFwcGxpY2F0aW9ucyB0aGF0IG1heSBiZSB1c2luZyB0aGlzIGZpbGUuJztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1lcmdlRGF0YVZpb2xhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIC8vIE1lcmdlIGRhdGEgdmlvbGF0aW9uIGVycm9ycyBpbnRlbmRzIHRvIGNhdGVyIGZvci9ibG9jayBjdXJhdG9yc1xyXG4gIC8vICBmcm9tIHVwbG9hZGluZyBhIGNvbGxlY3Rpb24gd2l0aCBmYXVsdHkgbWVyZ2VkIGRhdGEuXHJcbiAgLy8gV2UgZGVmaW5lIGZhdWx0eSBtZXJnZWQgZGF0YSBhczpcclxuICAvLyAgMS4gQSBtZXJnZWQgc2NyaXB0IHNlZ21lbnQgd2hpY2ggcmVsaWVzIG9uIGEgY2VydGFpbiBtb2QgdG8gYmUgaW5jbHVkZWQgaW4gdGhlXHJcbiAgLy8gICAgIGNvbGxlY3Rpb24sIHlldCBpdCBpcyBub3QgaW5jbHVkZWQuXHJcbiAgLy8gIDIuIEEgbWVyZ2VkIHNjcmlwdCBzZWdtZW50IHdoaWNoIHJlcXVpcmVzIGEgc3BlY2lmaWMgbW9kIHRvIGJlIGluc3RhbGxlZCxcclxuICAvLyAgICAgeWV0IHRoZSBjb2xsZWN0aW9uIGhpZ2hsaWdodGVkIHNhaWQgbW9kIGFzIFwib3B0aW9uYWxcIjsgcG90ZW50aWFsbHlcclxuICAvLyAgICAgcmVzdWx0aW5nIGluIHRoZSBtb2QgYmVpbmcgbWlzc2luZyBvbiB0aGUgdXNlciBlbmQuXHJcbiAgcHJpdmF0ZSBtTm90SW5jbHVkZWQ6IHN0cmluZ1tdO1xyXG4gIHByaXZhdGUgbU9wdGlvbmFsOiBzdHJpbmdbXTtcclxuICBwcml2YXRlIG1Db2xsZWN0aW9uTmFtZTogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKG5vdEluY2x1ZGVkOiBzdHJpbmdbXSwgb3B0aW9uYWw6IHN0cmluZ1tdLCBjb2xsZWN0aW9uTmFtZTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihgTWVyZ2VkIHNjcmlwdCBkYXRhIGZvciAke2NvbGxlY3Rpb25OYW1lfSBpcyByZWZlcmVuY2luZyBtaXNzaW5nL3VuZGVwbG95ZWQvb3B0aW9uYWwgbW9kc2ApO1xyXG4gICAgdGhpcy5uYW1lID0gJ01lcmdlRGF0YVZpb2xhdGlvbkVycm9yJztcclxuICAgIHRoaXMubU9wdGlvbmFsID0gb3B0aW9uYWw7XHJcbiAgICB0aGlzLm1Ob3RJbmNsdWRlZCA9IG5vdEluY2x1ZGVkO1xyXG4gICAgdGhpcy5tQ29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uTmFtZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgT3B0aW9uYWwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tT3B0aW9uYWw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IE5vdEluY2x1ZGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubU5vdEluY2x1ZGVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBDb2xsZWN0aW9uTmFtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm1Db2xsZWN0aW9uTmFtZVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNIYXNoSW1wbChmaWxlUGF0aCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpO1xyXG4gICAgY29uc3Qgc3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCk7XHJcbiAgICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBkYXRhID0gc3RyZWFtLnJlYWQoKTtcclxuICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICBoYXNoLnVwZGF0ZShkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBzdHJlYW0ub24oJ2VuZCcsICgpID0+IHJlc29sdmUoaGFzaC5kaWdlc3QoJ2hleCcpKSk7XHJcbiAgICBzdHJlYW0ub24oJ2Vycm9yJywgcmVqZWN0KTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEhhc2goZmlsZVBhdGgsIHRyaWVzID0gMykge1xyXG4gIHJldHVybiBjYWxjSGFzaEltcGwoZmlsZVBhdGgpXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgaWYgKFsnRU1GSUxFJywgJ0VCQURGJ10uaW5jbHVkZXMoZXJyWydjb2RlJ10pICYmICh0cmllcyA+IDApKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEhhc2goZmlsZVBhdGgsIHRyaWVzIC0gMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9hZE9yZGVyRmlsZVBhdGgoKSB7XHJcbiAgcmV0dXJuIHBhdGguam9pbih1dGlsLmdldFZvcnRleFBhdGgoJ2RvY3VtZW50cycpLCAnVGhlIFdpdGNoZXIgMycsIExPQURfT1JERVJfRklMRU5BTUUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpb3JpdHlUeXBlQnJhbmNoKCkge1xyXG4gIHJldHVybiBbJ3NldHRpbmdzJywgJ3dpdGNoZXIzJywgJ3ByaW9yaXR5dHlwZSddO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3VwcHJlc3NNb2RMaW1pdEJyYW5jaCgpIHtcclxuICByZXR1cm4gWydzZXR0aW5ncycsICd3aXRjaGVyMycsICdzdXBwcmVzc01vZExpbWl0UGF0Y2gnXTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEdBTUVfSUQgPSAnd2l0Y2hlcjMnO1xyXG5cclxuLy8gRmlsZSB1c2VkIGJ5IHNvbWUgbW9kcyB0byBkZWZpbmUgaG90a2V5L2lucHV0IG1hcHBpbmdcclxuZXhwb3J0IGNvbnN0IElOUFVUX1hNTF9GSUxFTkFNRSA9ICdpbnB1dC54bWwnO1xyXG5cclxuLy8gVGhlIFczTU0gbWVudSBtb2QgcGF0dGVybiBzZWVtcyB0byBlbmZvcmNlIGEgbW9kZGluZyBwYXR0ZXJuXHJcbi8vICB3aGVyZSB7ZmlsZW5hbWV9LnBhcnQudHh0IGhvbGRzIGEgZGlmZiBvZiB3aGF0IG5lZWRzIHRvIGJlXHJcbi8vICBhZGRlZCB0byB0aGUgb3JpZ2luYWwgZmlsZSAtIHdlJ3JlIGdvaW5nIHRvIHVzZSB0aGlzIHBhdHRlcm4gYXMgd2VsbC5cclxuZXhwb3J0IGNvbnN0IFBBUlRfU1VGRklYID0gJy5wYXJ0LnR4dCc7XHJcblxyXG5leHBvcnQgY29uc3QgU0NSSVBUX01FUkdFUl9JRCA9ICdXM1NjcmlwdE1lcmdlcic7XHJcbmV4cG9ydCBjb25zdCBNRVJHRV9JTlZfTUFOSUZFU1QgPSAnTWVyZ2VJbnZlbnRvcnkueG1sJztcclxuZXhwb3J0IGNvbnN0IExPQURfT1JERVJfRklMRU5BTUUgPSAnbW9kcy5zZXR0aW5ncyc7XHJcbmV4cG9ydCBjb25zdCBJMThOX05BTUVTUEFDRSA9ICdnYW1lLXdpdGNoZXIzJztcclxuZXhwb3J0IGNvbnN0IENPTkZJR19NQVRSSVhfUkVMX1BBVEggPSBwYXRoLmpvaW4oJ2JpbicsICdjb25maWcnLCAncjRnYW1lJywgJ3VzZXJfY29uZmlnX21hdHJpeCcsICdwYycpO1xyXG5cclxuZXhwb3J0IGNvbnN0IFczX1RFTVBfREFUQV9ESVIgPSBwYXRoLmpvaW4odXRpbC5nZXRWb3J0ZXhQYXRoKCd0ZW1wJyksICdXM1RlbXBEYXRhJyk7XHJcblxyXG5leHBvcnQgY29uc3QgVU5JX1BBVENIID0gJ21vZDAwMDBfX19fQ29tcGlsYXRpb25UcmlnZ2VyJztcclxuZXhwb3J0IGNvbnN0IExPQ0tFRF9QUkVGSVggPSAnbW9kMDAwMF8nO1xyXG5cclxuZXhwb3J0IGNvbnN0IERPX05PVF9ESVNQTEFZID0gWydjb21tdW5pdHlwYXRjaC1iYXNlJ107XHJcbi8vIG1pbmltYXRjaCBpcyBzdXBwb3NlZCB0byBiZSBjYXNlLWluc2Vuc2l0aXZlLCBidXQgaXQncyBub3Qgd29ya2luZyBmb3Igc29tZSByZWFzb24uLi5cclxuZXhwb3J0IGNvbnN0IERPX05PVF9ERVBMT1kgPSBbJ1JFQURNRS5UWFQnXTtcclxuZXhwb3J0IGNvbnN0IFNDUklQVF9NRVJHRVJfRklMRVMgPSBbJ1dpdGNoZXJTY3JpcHRNZXJnZXIuZXhlJ107XHJcblxyXG5leHBvcnQgY29uc3QgTk9OX1NPUlRBQkxFID0gWyd3aXRjaGVyM21lbnVtb2Rkb2N1bWVudHMnLCAnY29sbGVjdGlvbiddO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFDVElWSVRZX0lEX0lNUE9SVElOR19MT0FET1JERVIgPSAnYWN0aXZpdHktd2l0Y2hlcjMtaW1wb3J0aW5nLWxvYWRvcmRlcic7Il19