"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installMixed = exports.testSupportedMixed = exports.installDLCMod = exports.testDLCMod = void 0;
const path_1 = __importDefault(require("path"));
const common_1 = require("./common");
function testDLCMod(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const nonDlcFile = files.find(file => !file.startsWith('dlc'));
    return (nonDlcFile !== undefined)
        ? Promise.resolve({ supported: false, requiredFiles: [] })
        : Promise.resolve({ supported: true, requiredFiles: [] });
}
exports.testDLCMod = testDLCMod;
function installDLCMod(files) {
    const modNames = [];
    const setModTypeInstr = {
        type: 'setmodtype',
        value: 'witcher3dlc',
    };
    const instructions = files.reduce((accum, iter) => {
        if (path_1.default.extname(iter) === '') {
            return accum;
        }
        const segments = iter.split(path_1.default.sep);
        const properlyFormatted = segments.length > 2
            ? (segments[0].toLowerCase() === 'dlc') && ((segments[2] || '').toLowerCase() === 'content')
            : false;
        const modName = properlyFormatted
            ? segments[1]
            : segments[0];
        modNames.push(modName);
        const destination = properlyFormatted
            ? segments.slice(1).join(path_1.default.sep)
            : segments.join(path_1.default.sep);
        accum.push({
            type: 'copy',
            source: iter,
            destination,
        });
        return accum;
    }, [setModTypeInstr]);
    const modNamesAttr = {
        type: 'attribute',
        key: 'modComponents',
        value: modNames,
    };
    instructions.push(modNamesAttr);
    return Promise.resolve({ instructions });
}
exports.installDLCMod = installDLCMod;
function testSupportedMixed(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const hasConfigMatrixFile = files.find(file => path_1.default.basename(file).toLowerCase() === common_1.CONFIG_MATRIX_REL_PATH) !== undefined;
    if (hasConfigMatrixFile) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const hasPrefix = (prefix, fileEntry) => {
        const segments = fileEntry.toLowerCase().split(path_1.default.sep);
        if (segments.indexOf('content') !== 1) {
            return false;
        }
        return (segments[0].length > 3) && (segments[0].startsWith(prefix));
    };
    const supported = ((files.find(file => hasPrefix('dlc', file)) !== undefined)
        && (files.find(file => hasPrefix('mod', file)) !== undefined));
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
exports.testSupportedMixed = testSupportedMixed;
function installMixed(files) {
    const modNames = [];
    const instructions = files.reduce((accum, iter) => {
        const segments = iter.split(path_1.default.sep);
        if (!path_1.default.extname(segments[segments.length - 1])) {
            return accum;
        }
        const modName = segments[0].startsWith('mod')
            ? segments[0] : undefined;
        const destination = (segments[0].startsWith('dlc'))
            ? ['dlc'].concat(segments).join(path_1.default.sep)
            : (modName !== undefined)
                ? ['mods'].concat(segments).join(path_1.default.sep)
                : undefined;
        if (destination !== undefined) {
            if (modName !== undefined) {
                modNames.push(modName);
            }
            const instruction = {
                type: 'copy',
                source: iter,
                destination,
            };
            accum.push(instruction);
        }
        return accum;
    }, [])
        .concat({
        type: 'attribute',
        key: 'modComponents',
        value: modNames,
    });
    return Promise.resolve({ instructions });
}
exports.installMixed = installMixed;
//# sourceMappingURL=data:application/json;base64,