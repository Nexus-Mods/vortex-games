//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwcmVjYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlcHJlY2F0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgRkJMTyBkb2VzIG5vdCBjdXJyZW50bHkgc3VwcG9ydCBpbmRpdmlkdWFsIGNvbnRleHQgYWN0aW9uc1xyXG4gICBsZWF2aW5nIHRoaXMgaGVyZSBmb3Igbm93IGFzIHdlIG1heSBkZWNpZGUgdG8gZW5oYW5jZSBGQkxPIGluXHJcbiAgIHRoZSBmdXR1cmUuXHJcbiovXHJcbi8vIGNvbnN0IG9uU2V0UHJpb3JpdHkgPSAoaXRlbUtleSwgd2FudGVkUHJpb3JpdHkpID0+IHtcclxuLy8gICByZXR1cm4gdGhpcy53cml0ZVRvTW9kU2V0dGluZ3MoKVxyXG4vLyAgICAgLnRoZW4oKCkgPT4ge1xyXG4vLyAgICAgICB3YW50ZWRQcmlvcml0eSA9ICt3YW50ZWRQcmlvcml0eTtcclxuLy8gICAgICAgY29uc3Qgc3RhdGUgPSBjb250ZXh0LmFwaS5zdG9yZS5nZXRTdGF0ZSgpO1xyXG4vLyAgICAgICBjb25zdCBhY3RpdmVQcm9maWxlID0gc2VsZWN0b3JzLmFjdGl2ZVByb2ZpbGUoc3RhdGUpO1xyXG4vLyAgICAgICBjb25zdCBtb2RJZCA9IF9JTklfU1RSVUNUW2l0ZW1LZXldLlZLO1xyXG4vLyAgICAgICBjb25zdCBsb0VudHJ5ID0gbG9hZE9yZGVyW21vZElkXTtcclxuLy8gICAgICAgaWYgKHByaW9yaXR5TWFuYWdlci5wcmlvcml0eVR5cGUgPT09ICdwb3NpdGlvbi1iYXNlZCcpIHtcclxuLy8gICAgICAgICBjb250ZXh0LmFwaS5zdG9yZS5kaXNwYXRjaChhY3Rpb25zLnNldExvYWRPcmRlckVudHJ5KFxyXG4vLyAgICAgICAgICAgYWN0aXZlUHJvZmlsZS5pZCwgbW9kSWQsIHtcclxuLy8gICAgICAgICAgICAgLi4ubG9FbnRyeSxcclxuLy8gICAgICAgICAgICAgcG9zOiAobG9FbnRyeS5wb3MgPCB3YW50ZWRQcmlvcml0eSkgPyB3YW50ZWRQcmlvcml0eSA6IHdhbnRlZFByaW9yaXR5IC0gMixcclxuLy8gICAgICAgICB9KSk7XHJcbi8vICAgICAgICAgbG9hZE9yZGVyID0gdXRpbC5nZXRTYWZlKHN0YXRlLCBbJ3BlcnNpc3RlbnQnLCAnbG9hZE9yZGVyJywgYWN0aXZlUHJvZmlsZS5pZF0sIHt9KTtcclxuLy8gICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICBjb250ZXh0LmFwaS5zdG9yZS5kaXNwYXRjaChhY3Rpb25zLnNldExvYWRPcmRlckVudHJ5KFxyXG4vLyAgICAgICAgICAgYWN0aXZlUHJvZmlsZS5pZCwgbW9kSWQsIHtcclxuLy8gICAgICAgICAgICAgLi4ubG9FbnRyeSxcclxuLy8gICAgICAgICAgICAgcHJlZml4OiBwYXJzZUludChfSU5JX1NUUlVDVFtpdGVtS2V5XS5Qcmlvcml0eSwgMTApLFxyXG4vLyAgICAgICAgIH0pKTtcclxuLy8gICAgICAgfVxyXG4vLyAgICAgICBpZiAocmVmcmVzaEZ1bmMgIT09IHVuZGVmaW5lZCkge1xyXG4vLyAgICAgICAgIHJlZnJlc2hGdW5jKCk7XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH0pXHJcbi8vICAgICAuY2F0Y2goZXJyID0+IG1vZFNldHRpbmdzRXJyb3JIYW5kbGVyKGNvbnRleHQsIGVycixcclxuLy8gICAgICAgJ0ZhaWxlZCB0byBtb2RpZnkgbG9hZCBvcmRlciBmaWxlJykpO1xyXG4vLyB9O1xyXG5cclxuLy8gaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG4vLyBpbXBvcnQgeyB3aXRoVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0JztcclxuLy8gaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuLy8gaW1wb3J0IHsgQ29tcG9uZW50RXgsIFRvb2xiYXJJY29uLCB0eXBlcywgdXRpbCB9IGZyb20gJ3ZvcnRleC1hcGknO1xyXG5cclxuLy8gaW1wb3J0IHsgc2V0UHJpb3JpdHlUeXBlIH0gZnJvbSAnLi4vYWN0aW9ucyc7XHJcbi8vIGltcG9ydCB7IGdldFByaW9yaXR5VHlwZUJyYW5jaCB9IGZyb20gJy4uL2NvbW1vbic7XHJcbi8vIGltcG9ydCB7IFByaW9yaXR5VHlwZSB9IGZyb20gJy4uL3ByaW9yaXR5TWFuYWdlcic7XHJcblxyXG4vLyBpbnRlcmZhY2UgSUNvbm5lY3RlZFByb3BzIHtcclxuLy8gICBwcmlvcml0eVR5cGU6IFByaW9yaXR5VHlwZTtcclxuLy8gfVxyXG5cclxuLy8gaW50ZXJmYWNlIElBY3Rpb25Qcm9wcyB7XHJcbi8vICAgb25TZXRQcmlvcml0eVR5cGU6ICh0eXBlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbi8vIH1cclxuXHJcbi8vIHR5cGUgSVByb3BzID0gSUNvbm5lY3RlZFByb3BzICYgSUFjdGlvblByb3BzO1xyXG4vLyBjb25zdCBUQkkgPSBUb29sYmFySWNvbiBhcyBhbnk7XHJcbi8vIGNsYXNzIFByaW9yaXR5VHlwZUJ1dHRvbiBleHRlbmRzIENvbXBvbmVudEV4PElQcm9wcywge30+IHtcclxuLy8gICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuLy8gICAgIGNvbnN0IHsgdCwgcHJpb3JpdHlUeXBlIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuLy8gICAgIHJldHVybiAoXHJcbi8vICAgICAgIDxUQklcclxuLy8gICAgICAgICBpZD0nc3dpdGNoLXByaW9yaXR5LXR5cGUtYnV0dG9uJ1xyXG4vLyAgICAgICAgIGljb249J3NvcnQtbm9uZSdcclxuLy8gICAgICAgICB0ZXh0PXtwcmlvcml0eVR5cGUgPT09ICdwb3NpdGlvbi1iYXNlZCcgPyB0KCdUbyBQcmVmaXggQmFzZWQnKSA6IHQoJ1RvIFBvc2l0aW9uIEJhc2VkJyl9XHJcbi8vICAgICAgICAgdG9vbHRpcD17dCgnQ2hhbmdlcyBwcmlvcml0eSBhc3NpZ25tZW50IHJlc3RyaWN0aW9ucyAtIHByZWZpeCBiYXNlZCBpcyAnXHJcbi8vICAgICAgICAgICAgICAgICArICdsZXNzIHJlc3RyaWN0aXZlIGFuZCBhbGxvd3MgeW91IHRvIG1hbnVhbGx5IHNldCBwcmlvcml0aWVzIGxpa2UgJ1xyXG4vLyAgICAgICAgICAgICAgICAgKyAnXCI1MDAwXCIsIHdoaWxlIHBvc2l0aW9uIGJhc2VkIHdpbGwgcmVzdHJpY3QgcHJpb3JpdGllcyB0byB0aGVpciAnXHJcbi8vICAgICAgICAgICAgICAgICArICdwb3NpdGlvbiBpbiB0aGUgbG9hZCBvcmRlciBwYWdlIChpbiBhbiBpbmNyZW1lbnRhbCBtYW5uZXIpJyl9XHJcbi8vICAgICAgICAgb25DbGljaz17dGhpcy5zd2l0Y2h9XHJcbi8vICAgICAgIC8+XHJcbi8vICAgICApO1xyXG4vLyAgIH1cclxuXHJcbi8vICAgcHJpdmF0ZSBzd2l0Y2ggPSAoKSA9PiB7XHJcbi8vICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5wcm9wcy5wcmlvcml0eVR5cGU7XHJcbi8vICAgICB0aGlzLnByb3BzLm9uU2V0UHJpb3JpdHlUeXBlKChjdXJyZW50ID09PSAncG9zaXRpb24tYmFzZWQnKVxyXG4vLyAgICAgICA/ICdwcmVmaXgtYmFzZWQnIDogJ3Bvc2l0aW9uLWJhc2VkJyk7XHJcbi8vICAgfVxyXG4vLyB9XHJcblxyXG4vLyBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGU6IHR5cGVzLklTdGF0ZSwgb3duUHJvcHM6IElQcm9wcyk6IElDb25uZWN0ZWRQcm9wcyB7XHJcbi8vICAgcmV0dXJuIHtcclxuLy8gICAgIHByaW9yaXR5VHlwZTogdXRpbC5nZXRTYWZlKHN0YXRlLCBnZXRQcmlvcml0eVR5cGVCcmFuY2goKSwgJ3ByZWZpeC1iYXNlZCcpLFxyXG4vLyAgIH07XHJcbi8vIH1cclxuXHJcbi8vIGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaDogYW55KTogSUFjdGlvblByb3BzIHtcclxuLy8gICByZXR1cm4ge1xyXG4vLyAgICAgb25TZXRQcmlvcml0eVR5cGU6ICh0eXBlOiBzdHJpbmcpID0+IGRpc3BhdGNoKHNldFByaW9yaXR5VHlwZSh0eXBlKSksXHJcbi8vICAgfTtcclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHRcclxuLy8gICB3aXRoVHJhbnNsYXRpb24oWydjb21tb24nLCAnd2l0Y2hlcjMnXSkoXHJcbi8vICAgICBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShQcmlvcml0eVR5cGVCdXR0b24gYXMgYW55KSxcclxuLy8gICApIGFzIFJlYWN0LkNvbXBvbmVudENsYXNzPHt9PjtcclxuIl19